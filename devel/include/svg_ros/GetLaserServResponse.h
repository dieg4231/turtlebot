// Generated by gencpp from file svg_ros/GetLaserServResponse.msg
// DO NOT EDIT!


#ifndef SVG_ROS_MESSAGE_GETLASERSERVRESPONSE_H
#define SVG_ROS_MESSAGE_GETLASERSERVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svg_ros
{
template <class ContainerAllocator>
struct GetLaserServResponse_
{
  typedef GetLaserServResponse_<ContainerAllocator> Type;

  GetLaserServResponse_()
    : answer()
    , sensors()  {
      sensors.assign(0.0);
  }
  GetLaserServResponse_(const ContainerAllocator& _alloc)
    : answer(_alloc)
    , sensors()  {
  (void)_alloc;
      sensors.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _answer_type;
  _answer_type answer;

   typedef boost::array<float, 700>  _sensors_type;
  _sensors_type sensors;




  typedef boost::shared_ptr< ::svg_ros::GetLaserServResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svg_ros::GetLaserServResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetLaserServResponse_

typedef ::svg_ros::GetLaserServResponse_<std::allocator<void> > GetLaserServResponse;

typedef boost::shared_ptr< ::svg_ros::GetLaserServResponse > GetLaserServResponsePtr;
typedef boost::shared_ptr< ::svg_ros::GetLaserServResponse const> GetLaserServResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svg_ros::GetLaserServResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace svg_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svg_ros::GetLaserServResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svg_ros::GetLaserServResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svg_ros::GetLaserServResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f68907596d9632843680d4d7b67e844";
  }

  static const char* value(const ::svg_ros::GetLaserServResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f68907596d96328ULL;
  static const uint64_t static_value2 = 0x43680d4d7b67e844ULL;
};

template<class ContainerAllocator>
struct DataType< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svg_ros/GetLaserServResponse";
  }

  static const char* value(const ::svg_ros::GetLaserServResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string answer\n\
float32[700] sensors\n\
\n\
";
  }

  static const char* value(const ::svg_ros::GetLaserServResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.answer);
      stream.next(m.sensors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetLaserServResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svg_ros::GetLaserServResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svg_ros::GetLaserServResponse_<ContainerAllocator>& v)
  {
    s << indent << "answer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.answer);
    s << indent << "sensors[]" << std::endl;
    for (size_t i = 0; i < v.sensors.size(); ++i)
    {
      s << indent << "  sensors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sensors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVG_ROS_MESSAGE_GETLASERSERVRESPONSE_H
