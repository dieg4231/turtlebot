// Generated by gencpp from file svg_ros/GetLaserServRequest.msg
// DO NOT EDIT!


#ifndef SVG_ROS_MESSAGE_GETLASERSERVREQUEST_H
#define SVG_ROS_MESSAGE_GETLASERSERVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svg_ros
{
template <class ContainerAllocator>
struct GetLaserServRequest_
{
  typedef GetLaserServRequest_<ContainerAllocator> Type;

  GetLaserServRequest_()
    : param()
    , num_sensors(0)
    , range(0.0)
    , init_angle(0.0)  {
    }
  GetLaserServRequest_(const ContainerAllocator& _alloc)
    : param(_alloc)
    , num_sensors(0)
    , range(0.0)
    , init_angle(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _param_type;
  _param_type param;

   typedef int32_t _num_sensors_type;
  _num_sensors_type num_sensors;

   typedef float _range_type;
  _range_type range;

   typedef float _init_angle_type;
  _init_angle_type init_angle;




  typedef boost::shared_ptr< ::svg_ros::GetLaserServRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svg_ros::GetLaserServRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetLaserServRequest_

typedef ::svg_ros::GetLaserServRequest_<std::allocator<void> > GetLaserServRequest;

typedef boost::shared_ptr< ::svg_ros::GetLaserServRequest > GetLaserServRequestPtr;
typedef boost::shared_ptr< ::svg_ros::GetLaserServRequest const> GetLaserServRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svg_ros::GetLaserServRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace svg_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svg_ros::GetLaserServRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svg_ros::GetLaserServRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svg_ros::GetLaserServRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d51aa037cb9e92d030c9070ae81e3eb";
  }

  static const char* value(const ::svg_ros::GetLaserServRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d51aa037cb9e92dULL;
  static const uint64_t static_value2 = 0x030c9070ae81e3ebULL;
};

template<class ContainerAllocator>
struct DataType< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svg_ros/GetLaserServRequest";
  }

  static const char* value(const ::svg_ros::GetLaserServRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string param\n\
int32 num_sensors\n\
float32 range\n\
float32 init_angle\n\
";
  }

  static const char* value(const ::svg_ros::GetLaserServRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.param);
      stream.next(m.num_sensors);
      stream.next(m.range);
      stream.next(m.init_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetLaserServRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svg_ros::GetLaserServRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svg_ros::GetLaserServRequest_<ContainerAllocator>& v)
  {
    s << indent << "param: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param);
    s << indent << "num_sensors: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_sensors);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "init_angle: ";
    Printer<float>::stream(s, indent + "  ", v.init_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVG_ROS_MESSAGE_GETLASERSERVREQUEST_H
