// Generated by gencpp from file svg_ros/SensorSrvResponse.msg
// DO NOT EDIT!


#ifndef SVG_ROS_MESSAGE_SENSORSRVRESPONSE_H
#define SVG_ROS_MESSAGE_SENSORSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svg_ros
{
template <class ContainerAllocator>
struct SensorSrvResponse_
{
  typedef SensorSrvResponse_<ContainerAllocator> Type;

  SensorSrvResponse_()
    : flag(0)
    , region(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , sensors()
    , num_sensors(0)
    , sensor()  {
      sensors.assign(0.0);
  }
  SensorSrvResponse_(const ContainerAllocator& _alloc)
    : flag(0)
    , region(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , sensors()
    , num_sensors(0)
    , sensor(_alloc)  {
  (void)_alloc;
      sensors.assign(0.0);
  }



   typedef int32_t _flag_type;
  _flag_type flag;

   typedef int32_t _region_type;
  _region_type region;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _theta_type;
  _theta_type theta;

   typedef boost::array<float, 500>  _sensors_type;
  _sensors_type sensors;

   typedef int32_t _num_sensors_type;
  _num_sensors_type num_sensors;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensor_type;
  _sensor_type sensor;




  typedef boost::shared_ptr< ::svg_ros::SensorSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svg_ros::SensorSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SensorSrvResponse_

typedef ::svg_ros::SensorSrvResponse_<std::allocator<void> > SensorSrvResponse;

typedef boost::shared_ptr< ::svg_ros::SensorSrvResponse > SensorSrvResponsePtr;
typedef boost::shared_ptr< ::svg_ros::SensorSrvResponse const> SensorSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svg_ros::SensorSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace svg_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svg_ros::SensorSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svg_ros::SensorSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svg_ros::SensorSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9cadfc1937ef183a51963b4c6c84ee1a";
  }

  static const char* value(const ::svg_ros::SensorSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9cadfc1937ef183aULL;
  static const uint64_t static_value2 = 0x51963b4c6c84ee1aULL;
};

template<class ContainerAllocator>
struct DataType< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svg_ros/SensorSrvResponse";
  }

  static const char* value(const ::svg_ros::SensorSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 flag\n\
int32 region\n\
float32 x\n\
float32 y\n\
float32 theta\n\
float32[500] sensors\n\
int32 num_sensors\n\
string sensor\n\
\n\
";
  }

  static const char* value(const ::svg_ros::SensorSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.region);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.sensors);
      stream.next(m.num_sensors);
      stream.next(m.sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svg_ros::SensorSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svg_ros::SensorSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
    s << indent << "region: ";
    Printer<int32_t>::stream(s, indent + "  ", v.region);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "sensors[]" << std::endl;
    for (size_t i = 0; i < v.sensors.size(); ++i)
    {
      s << indent << "  sensors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sensors[i]);
    }
    s << indent << "num_sensors: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_sensors);
    s << indent << "sensor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVG_ROS_MESSAGE_SENSORSRVRESPONSE_H
